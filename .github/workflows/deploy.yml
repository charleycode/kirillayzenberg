name: Deploy Static Site to S3

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout source code
        uses: actions/checkout@v3

      - name: üß± Install dependencies
        run: npm install

      - name: ‚öôÔ∏è Build and export the site
        run: |
          npm run build
          npm run export

      - name: üöÄ Upload static site to S3 (with correct MIME types)
        run: |
          aws s3 sync ./out s3://$AWS_S3_BUCKET \
            --delete \
            --acl public-read \
            --content-type text/html \
            --exclude "*" \
            --include "*.html" \
            --metadata-directive REPLACE

          # Upload other asset types with auto-detection
          aws s3 sync ./out s3://$AWS_S3_BUCKET \
            --delete \
            --acl public-read \
            --exclude "*.html"
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: üîÅ Apply redirects from redirects.json
        run: |
          if [ ! -f redirects.json ]; then
            echo "‚ö†Ô∏è No redirects.json file found, skipping redirect setup."
            exit 0
          fi

          echo "üìÑ Applying redirects from redirects.json..."

          cat redirects.json | jq -r 'to_entries[] | "\(.key) \(.value)"' | while read from to; do
            echo "‚û°Ô∏è Creating redirect: $from ‚Üí $to"
            aws s3 cp ./out/index.html s3://$AWS_S3_BUCKET$from/index.html \
              --website-redirect "$to" \
              --metadata-directive REPLACE \
              --acl public-read \
              --content-type text/html
          done
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: üîÑ Invalidate CloudFront cache (optional)
        if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
